業務フロー
    業務システムを構築する際は、ユーザの 業務の流れを可視化して
    把握する必要があります。流れをイメージしないで断片の組み合わせ
    で作成されたアプリケーションは、運用に大きな落とし穴がある場合が
    多いからです。業務に関して、自分の頭の中を整理し、ユーザと確認し
    、プロジェクトメsンバーにも伝える、重要な役割を持ったドキュメントが業務フローです。

        draw.ioで実装?

設計書記述様式
    I/O 関連図や画面・帳票レイアウトのアイコン等に関する表記法を定めたものです。
    スプシに入れる？

機能一覧表
    スプシで実装
    文字通り、開発対象となるアプリケーション機能を一覧にしたもので、 
    システム化の対象を明確に表す資料となります。
    システム開発対象となる機能を洗い出して、大分類（サブシステム）、
    中分類（機能分類）ごとに整理して一覧表にまとめています。
    また、機能ごとに画面入力、画面照会、帳票出力、バッチ処理の 4 
    種類に区分けをしています。機能一覧表は、システム化の対象を明確に
    表す資料となります。「機能一覧表」は、契約時に作成しておくドキュメント
    ですが、下記のようにプロジェクトの段階でその情報が活用されますので、
    きちんと作成しましょう。

    見積：見積範囲の明確化と機能ごとの見積工数（金額）
    契約：開発範囲の明確化
    詳細設計：詳細設計書作業の進捗管理（担当者割当/予定・実績管理）

画面遷移図
    優先度少し低め？

    文字通り画面の遷移（展開）を図で表したものです。下記は画面遷移図の記入例 です。
    これを見ると各画面が、どのような遷移で呼び出されるかを直感的に理解できます。

システム構成図	システムの全体の構成を図にします。
業務フロー図	業務の流れを図で示します。
テーブル定義書	DBのテーブルの定義
機能一覧	システムの機能を一覧にした表
画面一覧	システムで使用される画面の一覧
画面遷移図	画面上の動きを図にしたもの
帳票一覧	出力される帳票の一覧
帳票レイアウト(縦)	縦形式の帳票のレイアウト
帳票レイアウト(横)	横形式の帳票レイアウト

画面仕様
    各画面内での操作の動き、画面同士の関係を示す。
    全体構成図・遷移図もあるとわかりやすい。

機能仕様
    個別の機能について、どういう目的で、何をするものなのかを示す。
    例えば、ユーザーの権限タイプによる挙動の違いなど、同じ機能を使う場合でも条件により処理が異なる時は、場合分けして整理しておくとわかりやすい。
    機能仕様は書いていくと細かくなりがちだが、「詳細ロジックはソースコードを読めば良い」ので、上述の前提や制約のようにソースを読んだだけではわかりづらいことを書いていくのが良い。

データ構造
    テーブルデータ構造を示す。データが何を指しているのか、どういう制約があるのかを示す。
    エンティティ間の関係性(カーディナリティ、オプショナリティ)も書いたER図がよい。

インフラ構成
    どのバージョンのなんというミドルを使っているか、などくらいはまとめておく。
    リクエスト制限、キャッシュ管理など、考慮が必要な情報があるなら、記載しておく。
    
その他

    外部システム連携など、必要に応じて記載していく。